---- recv Matches (87 in 33 files) ----
Api_lib.c (src\api):    /* don't recv on fatal errors: this might block the application task
Api_lib.c (src\api):    /* don't recv on fatal errors: this might block the application task
Api_msg.c (src\api): * @see raw.h (struct raw_pcb.recv) for parameters and return value
Api_msg.c (src\api): * @see udp.h (struct udp_pcb.recv) for parameters
Api_msg.c (src\api):  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
Api_msg.c (src\api): * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
Api_msg.c (src\api):  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
Api_msg.c (src\api):  /* pass NULL-message to recvmbox to wake up pending recv */
Api_msg.c (src\api):    /* don't restore recv callback: we don't want to receive any more data */
Dhcp.c (src\core): * lwIP is single-threaded and the array is only used while in recv
Dhcp.c (src\core):  /* set up the recv callback and argument */
Etharp.c (src\netif):  ETHARP_STATS_INC(etharp.recv);
Ethernetif.c (src\netif):    LINK_STATS_INC(link.recv);
Icmp.c (src\core\ipv4):  ICMP_STATS_INC(icmp.recv);
Icmp6.c (src\core\ipv6):  ICMP_STATS_INC(icmp.recv);
Igmp.c (src\core\ipv4):  IGMP_STATS_INC(igmp.recv);
Init.c (src\core):  #error "If you want to use broadcast filter per pcb on recv operations, you have to define IP_SOF_BROADCAST=1 in your lwipopts.h"
Ip.c (src\core\ipv4):  IP_STATS_INC(ip.recv);
Ip6.c (src\core\ipv6):  IP_STATS_INC(ip.recv);
Ip_frag.c (src\core\ipv4):  IPFRAG_STATS_INC(ip_frag.recv);
Msg_in.c (src\core\snmp): * Called for one async event. (recv external/private answer)
Netif.c (src\core):      LINK_STATS_INC(link.recv);
Opt.h (src\include\lwip): * on recv operations, you also have to set IP_SOF_BROADCAST_RECV=1.
Opt.h (src\include\lwip): * filter on recv operations.
Ppp.c (src\netif\ppp):  LINK_STATS_INC(link.recv);
Raw.c (src\core):        if (pcb->recv != NULL) {
Raw.c (src\core):          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
Raw.c (src\core):raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
Raw.c (src\core):  /* remember recv() callback and user data */
Raw.c (src\core):  pcb->recv = recv;
Raw.h (src\include\lwip):  raw_recv_fn recv;
Raw.h (src\include\lwip):  /* user-supplied argument for the recv callback */
Raw.h (src\include\lwip):void             raw_recv       (struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg);
Rawapi.txt (doc):                err_t (* recv)(void *arg, struct tcp_pcb *tpcb,
Rawapi.txt (doc):                void (* recv)(void *arg, struct udp_pcb *upcb,
Slipif.c (src\netif):        LINK_STATS_INC(link.recv);
Snmp_msg.h (src\include\lwip):/** Handle an internal (recv) or external (private response) event. */
Sockets.c (src\api):    /* Check if there is data left from the last recv operation. */
Sockets.c (src\api):    /* Check if there is data left from the last recv operation. /maq 041215 */
Sockets.h (src\include\lwip):/* Flags we can use with send and recv. */
Sockets.h (src\include\lwip):#define recv(a,b,c,d)         lwip_recv(a,b,c,d)
Stats.c (src\core):  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv)); 
Stats.c (src\core):  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", igmp->recv)); 
Stats.h (src\include\lwip):  STAT_COUNTER recv;             /* Received packets. */
Stats.h (src\include\lwip):  STAT_COUNTER recv;             /* Received packets. */
Tcp.c (src\core): * (tcp_recved() not called for all data passed to recv callback).
Tcp.c (src\core):/** Pass pcb->refused_data to the recv callback */
Tcp.c (src\core): * a recv callback for the pcb.
Tcp.c (src\core):    pcb->recv = tcp_recv_null;
Tcp.c (src\core): * @param pcb tcp_pcb to set the recv callback
Tcp.c (src\core): * @param recv callback function to call for this pcb when data is received
Tcp.c (src\core):tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
Tcp.c (src\core):  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
Tcp.c (src\core):  pcb->recv = recv;
Tcp.h (src\include\lwip):  tcp_recv_fn recv;
Tcp.h (src\include\lwip):void             tcp_recv    (struct tcp_pcb *pcb, tcp_recv_fn recv);
Tcp_impl.h (src\include\lwip):    if((pcb)->recv != NULL) {                                  \
Tcp_impl.h (src\include\lwip):      (ret) = (pcb)->recv((pcb)->callback_arg,(pcb),(p),(err));\
Tcp_impl.h (src\include\lwip):    if(((pcb)->recv != NULL)) {                                  \
Tcp_impl.h (src\include\lwip):      (ret) = (pcb)->recv((pcb)->callback_arg,(pcb),NULL,ERR_OK);\
Tcp_in.c (src\core):  TCP_STATS_INC(tcp.recv);
Test_tcp.c (test\unit\tcp): /* "recv" ACK for data1 */
Test_tcp_oos.c (test\unit\tcp):  /* don't 'recv' the first segment (1 byte) so that all other segments will be ooseq */
Test_tcp_oos.c (test\unit\tcp):  /* create segments and 'recv' them */
Test_tcp_oos.c (test\unit\tcp):  /* don't 'recv' the first segment (1 byte) so that all other segments will be ooseq */
Test_tcp_oos.c (test\unit\tcp):  /* create segments and 'recv' them */
Udp.c (src\core): * recv function. If no pcb is found or the datagram is incorrect, the
Udp.c (src\core):  UDP_STATS_INC(udp.recv);
Udp.c (src\core):              if (mpcb->recv != NULL) {
Udp.c (src\core):                    mpcb->recv(mpcb->recv_arg, mpcb, q, ip_current_src_addr(), src);
Udp.c (src\core):      if (pcb->recv != NULL) {
Udp.c (src\core):        /* now the recv function is responsible for freeing p */
Udp.c (src\core):        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
Udp.c (src\core):        /* no recv function registered? then we have to free the pbuf! */
Udp.c (src\core): * @param pcb the pcb for wich to set the recv callback
Udp.c (src\core): * @param recv function pointer of the callback function
Udp.c (src\core):udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
Udp.c (src\core):  /* remember recv() callback and user data */
Udp.c (src\core):  pcb->recv = recv;
Udp.h (src\include\lwip):  udp_recv_fn recv;
Udp.h (src\include\lwip):  /** user-supplied argument for the recv callback */
Udp.h (src\include\lwip):void             udp_recv       (struct udp_pcb *pcb, udp_recv_fn recv,
